/**
 * Mock Payment Authorization Generator
 *
 * Creates properly formatted mock payment authorization headers for demo purposes.
 * In production, this would be generated by signing a payment transaction with your wallet.
 */

import type { PaymentRequestData } from "@openlibx402/core";

export interface MockPaymentAuthorizationData {
  payment_id: string;
  actual_amount: string;
  payment_address: string;
  asset_address: string;
  network: string;
  timestamp: string;
  signature: string;
  public_key: string;
  transaction_hash?: string;
}

/**
 * Generate a mock payment authorization header
 *
 * This creates a properly formatted authorization header for testing.
 * In production, this would be signed with the actual wallet.
 */
export function generateMockPaymentAuthorization(
  paymentRequest: PaymentRequestData
): string {
  // Generate mock data matching the payment request
  const mockAuth: MockPaymentAuthorizationData = {
    payment_id: paymentRequest.payment_id,
    actual_amount: paymentRequest.max_amount_required,
    payment_address: paymentRequest.payment_address,
    asset_address: paymentRequest.asset_address,
    network: paymentRequest.network,
    timestamp: new Date().toISOString(),
    // Mock signature - 64 bytes hex encoded (128 chars)
    signature: Array(128)
      .fill(0)
      .map(() => Math.floor(Math.random() * 16).toString(16))
      .join(""),
    // Mock public key - 32 bytes base58 encoded
    public_key: generateMockPublicKey(),
    // Mock transaction hash for demo
    transaction_hash: "mock_tx_" + Date.now() + "_" + Math.random().toString(36).substring(7),
  };

  // Format as header value (base64 encoded JSON)
  const jsonStr = JSON.stringify(mockAuth);
  // Use browser-compatible base64 encoding
  const base64 =
    typeof window !== "undefined"
      ? btoa(jsonStr)
      : Buffer.from(jsonStr).toString("base64");

  return base64;
}

/**
 * Generate a mock Solana public key (base58)
 */
function generateMockPublicKey(): string {
  const base58chars = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";

  let result = "";
  for (let i = 0; i < 44; i++) {
    result += base58chars.charAt(Math.floor(Math.random() * base58chars.length));
  }
  return result;
}

/**
 * Info message for users about demo payment simulation
 */
export const DEMO_PAYMENT_INFO = "This demo uses simulated payments for testing purposes.\n\nIn production:\n1. User connects their Phantom/Solflare wallet\n2. App signs an SPL token transfer (USDC)\n3. Transaction is broadcast to Solana\n4. Server verifies payment on-chain\n5. Protected content is returned\n\nTry clicking \"Simulate Payment & Retry\" to test the X402 payment flow!";
